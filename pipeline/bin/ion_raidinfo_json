#!/bin/bash
# Copyright (C) 2013 Ion Torrent Systems, Inc. All Rights Reserved
#
# Queries all installed RAID control cards with MegaCli tool returns various
# drive characteristics.
# Output is json formatted text
#
PATH=/opt/MegaRAID/MegaCli/:$PATH
MEGALOG="-NoLog"

#==============================================================================
#==============================================================================
function get_num_enclosures()
{
    # $1 - Adapter ID
    MegaCli64 -EncInfo -a$1 $MEGALOG| grep "Number of enclosures" | cut -f3 -d- | sed -e 's/ //'
}
#==============================================================================
#==============================================================================
function get_adapter_name()
{
    # $1 - Adapter ID
    MegaCli64 -AdpAllInfo -a${1} $MEGALOG| grep "Product Name" | cut -f2 -d: | sed 's/ Adapter//g' | sed -e 's/^[ \t]*//'
}
#==============================================================================
#==============================================================================
function get_adapter_info()
{
    MegaCli64 -adpallinfo -a$1 $MEGALOG|sed -n "/Device Present/,/Supported Adapter Operations/p"| sed -e 's/[ \t]*//g'
}
#==============================================================================
#==============================================================================
function get_enclosure_info()
{
    # $1 - Adapter index
    # $2 - Enclosure index
    MegaCli64 -EncInfo -a$1 $MEGALOG|sed -n "/Enclosure $2/,/Chassis Status/p"| sed -e 's/[ \t]*//g'
}
#==============================================================================
#==============================================================================
function print_drv_info()
{
    adp=$1      # Adapter ID
    enc=$2      # Enclosure ID
    slot=$3     # Drive Slot ID
    drv_data=$(MegaCli64 -PDInfo -PhysDrv[$enc:$slot] -a$adp $MEGALOG| sed -e 's/[ \t]*//g')
    no_device=""
    for item in ${drv_data[@]}; do
        if echo $item|grep -q "^DeviceId"; then
            device_id=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
        elif echo $item|grep -q "^MediaError"; then
            media_error=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
        elif echo $item|grep -q "^OtherError"; then
            other_error=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
        elif echo $item|grep -q "^PredictiveFailure"; then
            predictive_failure=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
        elif echo $item|grep -q "^Firmwarestate"; then
            firmware_state=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
        elif echo $item|grep -q "^InquiryData"; then
            inquiry_data=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
        elif echo $item|grep -q "^NeedsEKMAttention"; then
            needs_ekm=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
        elif echo $item|grep -q "^ForeignState"; then
            foreign_state=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
        elif echo $item|grep -q "^DrivehasflaggedaS.M.A.R.Talert"; then
            smart=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
        elif echo $item|grep -q "^DriveTemperature"; then
            drive_temp=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
    	elif echo $item|grep -q "isnotfound"; then
            no_device="Empty"
        fi
    done
    # oh yes, this is crufty. convert spaces to newline so we can use sed to identify multiline, then extract what we want.
    port0_status=$(echo ${drv_data[@]} | tr ' ' '\n' | sed -n '/Port-0/,/Port status/p' | head -2 | tail -1 | cut -f2 -d:)
    port1_status=$(echo ${drv_data[@]} | tr ' ' '\n' | sed -n '/Port-1/,/Port status/p' | head -2 | tail -1 | cut -f2 -d:)
    if [ "$no_device" != "" ]; then
    	echo \"Slot\":\"$slot\",
    	echo \"Slot Status\":\"$no_device\"
    else
    	echo \"Slot\":\"$slot\",
    	echo \"Media Error Count\":\"$media_error\",
    	echo \"Other Error Count\":\"$other_error\",
    	echo \"Predictive Failure Count\":\"$predictive_failure\",
    	echo \"Firmware state\":\"$firmware_state\",
    	echo \"Inquiry Data\":\"$inquiry_data\",
    	echo \"Needs EKM Attention\":\"$needs_ekm\",
    	echo \"Foreign State\":\"$foreign_state\",
    	echo \"Port0 status\":\"$port0_status\",
    	if [ ! -u $port1_status ]; then # Optional field; not all cards report it
    	    echo \"Port1 status\":\"$port1_status\",
    	fi
    	echo \"Drive has flagged a S.M.A.R.T alert\":\"$smart\",
    	echo \"Drive Temperature\":\"$drive_temp\"
    fi
}
#==============================================================================
# Get the IDs for each Logical Volume for the given enclosure id
#==============================================================================
function get_lv_drv_ids()
{
    enc_id=$1
    adp=$2
    MegaCli64 -LDPDInfo -a$adp $MEGALOG|egrep '(Enclosure Device ID|Virtual Drive)'|grep Enclosure.*$enc_id -B1|awk '/^Virtual/{print $3}'
}
#==============================================================================
#==============================================================================
function get_virt_drv_ids()
{
    adp=$1
    MegaCli64 -LDPDinfo -a$adp $MEGALOG|awk '/^Virtual Drive/{print $3}'
}
#==============================================================================
#==============================================================================
function print_virt_drv_info()
{
    adp=$1
    drv=$2
    data=$(MegaCli64 -ldinfo -l$drv -a$adp $MEGALOG | sed -e 's/[ \t]*//g') 
    for item in $data; do
        if echo $item|grep -q "^Name"; then
            name=$(echo $item|cut -f2 -d:|cut -f1 -d'(')
            echo \"lv_name\":\"$name\",
        elif echo $item|grep -q "^VirtualDrive"; then
            id=$(echo $item|cut -f2 -d:|cut -f1 -d'(')
            echo \"id\":\"$id\",
        elif echo $item|grep -q "^Size"; then
            size=$(echo $item|cut -f2 -d:)
            echo \"lv_size\":\"$size\",
        elif echo $item|grep -q "^State"; then
            state=$(echo $item|cut -f2 -d:)
            echo \"lv_status\":\"$state\"
        fi
    done
}

#==============================================================================
# Main
#==============================================================================
num_adp=$(MegaCli64 -adpCount $MEGALOG| grep "Controller Count" | cut -f2 -d: | sed -e 's/ //' -e 's/\.//')

echo {    # Open json
echo \"hostname\": \"$(hostname -f)\",
echo \"system_name\": \"$(dmidecode -s system-product-name)\",
echo \"username\": \"$USER\",
echo \"num_adapters\": \"$num_adp\",
#------------------------------------------------------------------------------
# Open adapter array
#------------------------------------------------------------------------------
echo \"adapters\":[

for (( adp=0; adp<${num_adp}; adp++ ));
do
    adapter_name=$(get_adapter_name $adp)

    if (( adp>0 )); then echo ,;fi
    #--------------------------------------------------------------------------
    # Add an Adapter
    #--------------------------------------------------------------------------
    echo {
    echo \"id\":\"$adapter_name\",
    num_enc=$(get_num_enclosures $adp)
    echo \"num_enclosures\": \"$num_enc\",
    #--------------------------------------------------------------------------
    # Open Enclosure Array
    #--------------------------------------------------------------------------
    echo \"enclosures\":[
    if [[ $num_enc == 0 ]]; then
        #No enclosure, just a drive array
        adp_data=( $(get_adapter_info $adp) )
        for item in ${adp_data[@]}; do
            if echo $item|grep -q "^VirtualDrives"; then
                virt_drvs=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
            fi
            if echo $item|grep -q "^PhysicalDevices"; then
                phys_dev=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
            fi
            if echo $item|grep -q "^Disks"; then
                num_dsks=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
            fi
        done

        # Add a fake enclosure
        echo {
        echo \"EnclId\":\"internal\",
        echo \"id\":\"internal\",
        
        #----------------------------------------------------------------------
        # Add Logical Volumes for this enclosure
        #----------------------------------------------------------------------
        #----------------------------------------------------------------------
        # Open Logical Drive Array
        #----------------------------------------------------------------------
        echo \"logical_drives\":[
        cnt=0
        for lv_drv in $(get_virt_drv_ids $adp); do
            if (( cnt>0 )); then echo ,;fi
            #------------------------------------------------------------------
            # Add Logical Drive
            #------------------------------------------------------------------
            echo {
            print_virt_drv_info $adp $lv_drv
            echo -n }                           # Close LV drive
	    ((cnt++))
        done
        echo ],                                 # Close LV Array

		#----------------------------------------------------------------------
		# Add Physical Drives: Examine each slot
		#----------------------------------------------------------------------
        echo \"num_drives\": \"$num_dsks\",
        #----------------------------------------------------------------------
        # Open Drive Array
        #----------------------------------------------------------------------
        echo \"drives\":[
            # Add a drive
            for (( drv=0; drv<${num_dsks}; drv++ )); do
                if (( drv>0 )); then echo ,;fi
                echo {
                print_drv_info $adp "" $drv
        	echo -n }                               # Close drive
            done
        echo ]}
        # End of fake enclosure
    else

	    for (( myenc=0; myenc<${num_enc}; myenc++ )); do
        	if (( myenc>0 )); then echo ,;fi
        	enc_data=( $(get_enclosure_info $adp $myenc) )
        	enc_service_tag=''
        	for item in ${enc_data[@]}; do
        	    if echo $item|grep -q "^DeviceID"; then
                	enc_id=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
                	#break
        	    elif echo $item|grep -q "^VendorSpecific"; then
                	enc_service_tag=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
        	    fi
        	done

        	#----------------------------------------------------------------------
        	# Add an Enclosure
        	#----------------------------------------------------------------------
        	echo {
        	echo \"EnclId\":\"$enc_id\",
        	echo \"id\":\"$enc_service_tag\",
            
			#----------------------------------------------------------------------
            # Add Logical Volumes for this enclosure
			#----------------------------------------------------------------------
            #----------------------------------------------------------------------
			# Open Logical Drive Array
			#----------------------------------------------------------------------
			echo \"logical_drives\":[
            cnt=0
            for lv_drv in $(get_lv_drv_ids $enc_id $adp); do
                if (( cnt>0 )); then echo ,;fi
                #------------------------------------------------------------------
				# Add Logical Drive
				#------------------------------------------------------------------
                echo {
                #print_lv_drv_info $lv_drv
                print_virt_drv_info $adp $lv_drv
                echo -n }                           # Close LV drive
		((cnt++))
            done
            echo ],                                 # Close LV Array
            
			#----------------------------------------------------------------------
			# Add Physical Drives: Examine each slot
			#----------------------------------------------------------------------
        	for item in ${enc_data[@]}; do
        	    if echo $item|grep -q "^NumberofSlots"; then
                	num_drives=$(echo $item|cut -f2 -d:|sed -e 's/[ \t]*//')
                	break
        	    fi
        	done
        	echo \"num_drives\": \"$num_drives\",
        	#----------------------------------------------------------------------
        	# Open Drive Array
        	#----------------------------------------------------------------------
        	echo \"drives\":[
        	for (( drv=0; drv<${num_drives}; drv++ ));
        	do
        	    if (( drv>0 )); then echo ,;fi
        	    #------------------------------------------------------------------
        	    # Add a Drive
        	    #------------------------------------------------------------------
        	    echo {
                print_drv_info $adp $enc_id $drv
        	    echo -n }                               # Close drive
        	done
        	echo ]                                      # Close drive array
        	echo }                                      # Close enclosure
	    done
    fi
    echo ]                                          # Close enclosure array
    echo }                                          # Close adapter
done
echo ]                                              # Close adapter array
echo }    # Close json

exit
